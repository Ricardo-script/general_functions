// Instalar next-auth (doc: https://next-auth.js.org/):

	yarn add next-auth

//----------------------------------------------------------
// Para adicionar NextAuth.js a um projeto, crie o diretório:
	-src
		--app
		--api
			--auth
				--[...nextauth]
				--routes.ts
				
	--> src/app/api/auth/[...nextauth]/route.ts
	
	
	//---
import NextAuth, { NextAuthOptions } from "next-auth"
import Credentials from "next-auth/providers/credentials"

type TokenType = { // tipagem referente a resposta da requisição do login
    id: string;
    firstName: string;
    lastName: string;
    email: string;
    gender: string;
    image: string;
    username: string;
    token: string;
}

const nextAuthOptions: NextAuthOptions = {
    providers: [                       // tipo de autenticação a se fazer ex github, facebook, google ou credentials (email e senha própria)
        Credentials({                 // passar para dentro de Credentials as configurações do provedor
            name: 'credentials',     // pode passar o nome que quiser porém qnd for utilizar o provedor precisa ser o mesmo nome
            credentials: {          // dentro de credentials se passa oque eu quero receber de credencial para realizar o login ex: username e password (serão os nomes e tipos dos inputs)
                username: { label: 'username', type: 'text' },
                password: { label: 'password', type: 'password' }
            },

            async authorize(credentials, req) { // authorize é a chamada da api, credentials e req se quiser usar os dados da requisição
                const response = await fetch('https://dummyjson.com/auth/login', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        username: credentials?.username,
                        password: credentials?.password
                    })
                })

                const user = await response.json()

                if (user && response.ok) {
                    return user
                }

                return null
            },
        })
    ],
    pages: {         // pages recebe qual sera a url que consigo acessar essa pagina no exemplo signIn é a pagina de Login que se encontra em '/' diretorio raiz
        signIn: '/' // para que o next-auth possa identificar qual é a url base precisa criar o .env com as chaves
    },
	callbacks: {
        async jwt({ token, user, account }) {
            return { ...token, ...user }
        },
        async session({ session, token, user }) {
            session.user = token as TokenType;
            return session
        }
    }
}

const handler = NextAuth(nextAuthOptions)

export { handler as GET, handler as POST, nextAuthOptions }

//---
		
//---------------------------------------------------------------------------------------------------------
// crie na raiz do projeto .env, e insira ele dentro do gitignore:
// .env:

NEXTAUTH_URL=https://nqmhaq.hospedagemelastica.com.br/api
NEXTAUTH_SECRET=testeSecret

//(NEXTAUTH_URL) -> http://localhost:3000 é a url do projeto base front-end
//(NEXTAUTH_SECRET) -> testeSecret que á senha para gerenciar o JWT, pode criar em hash se quiser
// ao criar essas cheves e salvar o projeto o next-auth ja identifica que o localhost:3000 é a url base

//-----------------------------------------------------------------------------------------------------------

// Agora dentro da pasta src criar uma pasta chamada providers, e dentro dela criar um arquivo chamado sessionProvider.tsx
// Esse provider sera responsável por cobrir toda a aplicação:

//src/providers/sessionProvider.tsx:

'use client'
import { SessionProvider } from "next-auth/react";
import { ReactNode } from "react";

interface NextAuthSessionproviderProps {
    children: ReactNode
}

export default function NextAuthSessionProvider({ children }: NextAuthSessionproviderProps) {
    return <SessionProvider>{children}</SessionProvider>
}

// depois de criado o sessionProvider importa-lo no layout.tsx raiz da pasta app ficando da seguinte forma:
//layout.tsx: --------------------------------------------------------------------------------------------

import type { Metadata } from 'next'
import { Inter } from 'next/font/google'
import './globals.css'
import NextAuthSessionProvider from '@/providers/sessionProvider'

const inter = Inter({ subsets: ['latin'] })

export const metadata: Metadata = {
    title: 'Create Next App',
    description: 'Generated by create next app',
}

export default function RootLayout({
    children,
}: {
    children: React.ReactNode
}) {
    return (
        <html lang="en">
            <body className={inter.className}>
                <NextAuthSessionProvider>{children}</NextAuthSessionProvider>
            </body>
        </html>
    )
}
//-----------------------------------------------------------------------------------------------------------------------
// Agora para realizar o login importar o signIn do next-auth:


export default function Home(): JSX.Element {

    const [username, setUsername] = useState<string>('')
    const [password, setPassword] = useState<string>('')

    const router = useRouter()

    async function handleSubmit(event: SyntheticEvent) {
        event.preventDefault();

        const result = await signIn('credentials', { // importar signIn método de login do nexth-auth e nele passar o name que foi dado da crendential
            username,
            password,
            redirect: false, // passar false porque quando ele faz login automaticamente ele redireciona para uma pagina especifica, para controlar só passar false
        })

        if (result?.error) {
            console.log(result)
            return
        }

        router.replace('/Admin')// caso autenticar ->  se usar somente o navigation ele vai armazenando o historico das urls, caso volte ele vai retornando o mesmo caminho percorrido 
    }                           // então o replace ele apaga o historico, e quando clicar em voltar ele nao volta no login

    return (
        <form action="" onSubmit={handleSubmit}>
            <h2>Login</h2>
            <input type="text" onChange={(e) => setUsername(e.target.value)} />
            <input type="password" onChange={(e) => setPassword(e.target.value)} />
            <button>Entrar</button>
        </form>
    )
}

/*
  "username": "kminchelle",
  "password": "0lelplR"
*/
//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Agora devemos proteger as paginas, pode utilizar a estrutura de layouts do proprio next.
// Dentro de app crie uma pasta entre parenteses (admin-routes)
// e Dentro de (admin-routes) crie o layout.ts, logo após insira todas as pastas que so podem ser acessadas com login dentro de (admin-routes)
// agora o arquivo layout funcionará para todas as pastas e subpastas dentro de (admin-routes)
// Arquivo layout.ts

// import getServerSession que é um hook do next para obter as sessões do lado do servidor, verificar antes de renderizar o client

import { getServerSession } from "next-auth";
import { ReactNode } from "react";
import { nextAuthOptions } from "../api/auth/[...nextauth]/route";
import { redirect } from "next/navigation";

interface PrivateLayoutProps {
    children: ReactNode
}

export default async function PrivateLayout({ children }: PrivateLayoutProps) {
    const session = await getServerSession(nextAuthOptions) //nextAuthOptions é o option do next-auth

    if (!session) { // se não houver sessão redirecionar para a pasta raiz, no caso o login
        redirect('/')
    }

    return <>{children}</>
}

// com isso eu ja tenho a rota admin protegida
//------------------------------------------------------------------------------------------------------------------------

//Agora, se eu estiver logado eu não posso ter acesso ao login novamente para isso crie uma pasta (auth-routes)
// e dentro dela insira a Page de login, ela tbm tera uma pagina layout

//app/(auth-routes)/page.tsx -> pagina de login
//app/(auth-routes)/layout.tsx:

import { getServerSession } from "next-auth";
import { ReactNode } from "react";
import { nextAuthOptions } from "../api/auth/[...nextauth]/route";
import { redirect } from "next/navigation";

interface AuthLayoutProps {
    children: ReactNode
}

export default async function AuthLayout({ children }: AuthLayoutProps) {
    const session = await getServerSession(nextAuthOptions) //nextAuthOptions é o option do next-auth

    if (session) { //aqui ao contrario das pastas privadas se eu tiver sessão eu faço o caminho inverso e redireciono para Admin
        redirect('/Admin')
    }

    return <>{children}</>
}

//----------------------------------------------------------------------------------------------------------------------------------------

// Obtendo os dados da sessão, token e entre outros:
// Crie dentro de src uma pasta chamada types, e dentro ela crie um arquivo chamado next-auth.d.ts que é um arquivo de tipo p/ o Session do next-auth
//src/types.next-auth.d.ts:

import NextAuth from "next-auth/next";

declare module 'next-auth' {
    interface Session { //inserir o objeto que vem da resposta da requisição de login
        user: {
            id: string
            firstName: string
            lastName: string
            email: string
            gender: string
            image: string
            username: string
            token: string
        }
    }
}

//------------------------------------------------------------------------------------------------------------------------------------------
// //Feito isso eu posso usar os dados de sessãos em api/auth/[...nextauth]/route.ts:
// //import getServerSession para adquirir os dados de sessãos

import { nextAuthOptions } from "@/app/api/auth/[...nextauth]/route";
import { getServerSession } from "next-auth";

export default async function Admin() {

    const session = await getServerSession(nextAuthOptions)

    console.log('session', session)


    return (
        <div>
            <h3>Olá, Usuário. Bem vindo {session?.user.email}!</h3>
            <button>Sair</button>
        </div>
    );
}

// metodo de logout:

import { signOut } from "next-auth/react";
import { useRouter } from "next/navigation";

	const router = useRouter();

    const logout = async () => {
        await signOut({
            redirect: false
        })
        router.replace('/');
    }

// loading com next-auth (na chamada do signIn) -------------------------------------------------------------------------------------

const [loading, setLoading]= useState(false)

const handleSubmit = async (e) => {
        e.preventDefault();
        try {
          setLoading(true);
          const res = await signIn("credentials", {
            username: input.username,
            password: input.password,
            redirect: false
          });
          setLoading(false);
        } catch (error) {
          setLoading(false);
        }
};

//------------------------------------------------------------------------------------------------------------------------------------
// requisição do authorize com axios:

async authorize(credentials, req) { // authorize é a chamada da api, credentials e req se quiser usar os dados da requisição
	try {
	    const response = await axios.post('https://dummyjson.com/auth/login', {
		username: credentials?.username,
		password: credentials?.password
	    });

	    const user = response.data;

	    if (user && response.status === 200) {
		return user;
	    }

	    return null;
	} catch (error) {
	    // Trate os erros adequadamente, por exemplo, log ou gerencie de acordo com sua lógica de aplicativo
	    console.error('Erro ao autenticar:', error);
	    return null;
	}
},

//-------------------------------------------------------------------------------------------------------------------------
//Axios interceptors com next-auth

import axios from 'axios';
import { getSession } from 'next-auth/react';

const api = axios.create({
    baseURL: 'https://dummyjson.com'
});

api.interceptors.request.use(async (config) => {
    const session = await getSession();

    if (session) {
        config.headers.Authorization = `Bearer ${session?.user.token}`
    }

    return config;
}, (error) => {
    return Promise.reject(error);
});

export default api;

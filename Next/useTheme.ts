// useTheme:

// 1. Estrutura de Arquivos

/src
  /themes
    iconic.ts
    chevron.ts
  /context
    ThemeContext.tsx
  /components
    Header.tsx
  /pages
    _app.tsx
    index.tsx

//---------------------------------------------------------------------------------------

// as imagens devem estar dentro da pasta dessa forma:

/public
  /assets
  /images
    chevron_logo
    iconic_logo


//---------------------------------------------------------------------------------------
//2. Criando os Temas
Crie arquivos de tema para cada cliente. Por exemplo:

//themes/iconic.ts:


export const iconicTheme = {
	logo: '/assets/images/iconic_logo.png',
	colors: {
		primary: '#3A414B',
		secondary: '#FC4E00',
	},
	apiBaseUrl: 'https://api.iconic.com',
};


// themes/chevron.ts:

export const chevronTheme = {
	logo: '/assets/images/chevron_logo.png',
	colors: {
		primary: '#0000FF',
		secondary: '#FFFF00',
	},
	apiBaseUrl: 'https://api.chevron.com',
};


//---------------------------------------------------------------------------------------


//3. Criando um Contexto de Tema
//Crie um contexto para gerenciar o tema atual:

//context/ThemeContext.tsx:

'use client';

import { createContext, useContext, ReactNode } from 'react';
import { iconicTheme } from '../themes/iconic';
import { chevronTheme } from '../themes/chevron';

type Theme = typeof iconicTheme;

const ThemeContext = createContext<Theme | null>(null);

export const ThemeProvider = ({ children, client }: { children: ReactNode; client: string }) => {
	const theme = client === 'iconic' ? iconicTheme : chevronTheme;
	return <ThemeContext.Provider value={theme}>{children}</ThemeContext.Provider>;
};

export const useTheme = () => {
	const context = useContext(ThemeContext);
	if (!context) {
		throw new Error('useTheme must be used within a ThemeProvider');
	}
	return context;
};
]

//---------------------------------------------------------------------------------------


/*4. Configurando o Provedor de Tema no _app.tsx
No arquivo _app.tsx, envolva sua aplicação com o ThemeProvider e passe o cliente correto:

pages/_app.tsx:*/

import type { Metadata } from 'next';
import { inter, montserrat, poppins, roboto, mulish } from '@/styles/fonts';
import './globals.css';
import GlobalContextProvider from '@/context/GlobalContext';
import { ThemeProvider } from '@/context/ThemeContext';

export const metadata: Metadata = {
	title: 'Create Next App',
	description: 'Generated by create next app',
};

export default function RootLayout({
	children,
}: Readonly<{
	children: React.ReactNode;
}>) {
	const client = process.env.NEXT_PUBLIC_CLIENT || 'iconic'; // Defina o cliente via variável de ambiente

	return (
		<html lang="pt-br">
			<body
				className={`${poppins.variable} ${roboto.variable} ${inter.variable} ${montserrat.variable} ${mulish.variable}`}
				suppressHydrationWarning={true}
			>
				<ThemeProvider client={client}>
					<GlobalContextProvider>{children}</GlobalContextProvider>
				</ThemeProvider>
			</body>
		</html>
	);
}


//---------------------------------------------------------------------------------------

/*5. Usando o Tema nos Componentes
Agora, você pode usar o tema em qualquer componente:

components/Header.tsx://

import { useTheme } from '../context/ThemeContext';

export const Header = () => {
  const theme = useTheme();

  return (
    <header style={{ backgroundColor: theme.colors.primary }}>
      <img src={theme.logo} alt="Logo" />
    </header>
  );
};

//---------------------------------------------------------------------------------------

/*6. Configurando Variáveis de Ambiente
Defina a variável de ambiente NEXT_PUBLIC_CLIENT para escolher qual cliente será renderizado. 
Você pode fazer isso no arquivo .env:*/

# iconic

# chevron

NEXT_PUBLIC_CLIENT=chevron


//------------------------------------------------------------------------------------------

/*7. Fazendo Requisições com o Base URL Correto
Ao fazer requisições, use o apiBaseUrl do tema:*/


import { useTheme } from '../context/ThemeContext';

const fetchData = async () => {
  const theme = useTheme();
  const response = await fetch(`${theme.apiBaseUrl}/data`);
  const data = await response.json();
  return data;
};

//-------------------------------------------------------------------------------------------
